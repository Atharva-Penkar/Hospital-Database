generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Patient {
  P_ID               Int              @id
  name               String
  address            String?
  DOB                DateTime
  Sex                Gender           @default(M)
  mail               String?
  phone_no           String
  emergency_phone_no String
  admissions         Admit[]
  allergies          Allergy[]
  appointments       Appointment[]
  medicalHistory     MedicalHistory[]
}

model Doctor {
  D_ID           Int           @id
  name           String
  specialization String
  mail           String?
  phone          String
  shift          String?
  available      Boolean       @default(true)
  appointments   Appointment[]
  ad_id          Int?
  admit          Admit[]
}

model TestsAvailable {
  T_ID      Int    @id @default(autoincrement())
  test_name String
  Test      Test[]
}

model TreatmentsAvailable {
  Tr_ID          Int         @id @default(autoincrement())
  treatment_name String
  Treatment      Treatment[]
}

model Room {
  Room_No   Int      @id @default(autoincrement())
  Room_Type RoomType
  Available Boolean
  Admit     Admit[]
}

model Appointment {
  A_ID      Int               @id @default(autoincrement())
  P_ID      Int
  D_ID      Int
  TimeStamp DateTime
  Status    AppointmentStatus @default(Requested)
  Symptoms  String?
  doctor    Doctor            @relation(fields: [D_ID], references: [D_ID])
  patient   Patient           @relation(fields: [P_ID], references: [P_ID])
  tests     Test[]
  Treatment Treatment[]
  admit     Admit?
  diagnosis Diagnosis[]
}

model Treatment {
  treatment_id Int                 @id @default(autoincrement())
  A_ID         Int
  Tr_ID        Int
  dosage       Dosage
  duration     Int
  appointment  Appointment         @relation(fields: [A_ID], references: [A_ID])
  treatment    TreatmentsAvailable @relation(fields: [Tr_ID], references: [Tr_ID])
}

model Test {
  test_id     Int            @id @default(autoincrement())
  A_ID        Int
  T_ID        Int
  TimeStamp   DateTime
  Status      TestStatus
  appointment Appointment    @relation(fields: [A_ID], references: [A_ID])
  test        TestsAvailable @relation(fields: [T_ID], references: [T_ID])
}

model Admit {
  admit_id       Int         @id @default(autoincrement())
  P_ID           Int
  D_ID           Int
  R_no           Int
  admit_time     DateTime?
  discharge_time DateTime?
  status         AdmitStatus @default(Admit_Requested)
  patient        Patient     @relation(fields: [P_ID], references: [P_ID])
  room           Room        @relation(fields: [R_no], references: [Room_No])
  A_ID           Int         @unique
  appointment    Appointment @relation(fields: [A_ID], references: [A_ID])
  doctor         Doctor      @relation(fields: [D_ID], references: [D_ID])
}

model Disease {
  disease_id     Int              @id @default(autoincrement())
  Disease_Name   String
  Description    String?
  MedicalHistory MedicalHistory[]
}

model Diagnosis {
  diagnosis_id   Int         @id @default(autoincrement())
  diagnosis_Name String
  A_ID           Int         // <-- foreign key to Appointment
  appointment    Appointment @relation(fields: [A_ID], references: [A_ID])
}

model MedicalHistory {
  history_id Int     @id @default(autoincrement())
  P_ID       Int
  disease_id Int
  patient    Patient @relation(fields: [P_ID], references: [P_ID])
  disease    Disease @relation(fields: [disease_id], references: [disease_id])
}

model Allergy {
  allergy_id Int     @id @default(autoincrement())
  P_ID       Int
  patient    Patient @relation(fields: [P_ID], references: [P_ID])
}

model AuthUser {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  isOnline  Boolean  @default(false)
}

model AuthPatient {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  isOnline  Boolean  @default(false)
}

enum Gender {
  M
  F
  O
}

enum RoomType {
  General
  ICU
  Maternity
}

enum TestStatus {
  Pending
  Completed
  Cancelled
}

enum AppointmentStatus {
  Requested
  Scheduled
  Finished
}

enum Dosage {
  NNN
  NNY
  NYN
  NYY
  YNN
  YNY
  YYN
  YYY
}

enum AdmitStatus {
  Admit_Requested
  Admitted
  Discharge_Requested
  Discharged
}
